--# selene: allow(undefined_variable, incorrect_standard_library_use)

local pomodoros = require("nd.pomodoros")

context("Pomodoros", function()
  describe("when creating new pomodoro strings", function()
    it("it should allow taking session arrays", function()
      local pomo_str = pomodoros.PomodoroString:new({ "work", "rest", "work", "long-rest" })
      assert.are.equal("*-*+", pomo_str:to_str())
    end)
  end)

  describe("when adding to existing pomodoro strings", function()
    it("it should add it to the session string", function()
      local pomo_str = pomodoros.PomodoroString:new({ "work", "rest", "work", "long-rest" })
      pomo_str:add("work")
      assert.are.equal("*-*+*", pomo_str:to_str())
    end)
  end)

  describe("when creating pomodoros from raw symbol strings", function()
    it("it should properly parse the string and return the same", function()
      local pomo_str = pomodoros.PomodoroString:from_str("*-*-*+")
      assert.are.equal("*-*-*+", pomo_str:to_str())
    end)
  end)

  describe("when retrieving the number of sessions", function()
    it("it should return the correct number for all session types", function()
      local pomo_str = pomodoros.PomodoroString:from_str("*-*-*+")
      assert.are.equal(3, pomo_str:session_count("work"))
      assert.are.equal(2, pomo_str:session_count("rest"))
      assert.are.equal(1, pomo_str:session_count("long-rest"))
      pomo_str = pomodoros.PomodoroString:new()
      assert.are.equal(0, pomo_str:session_count("work"))
      assert.are.equal(0, pomo_str:session_count("rest"))
      assert.are.equal(0, pomo_str:session_count("long-rest"))
    end)
  end)
end)
