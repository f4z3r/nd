--# selene: allow(undefined_variable, incorrect_standard_library_use)

local entry = require("nd.entry_log.entry")

context("Given entries in the log file,", function()
  local basic_entry = entry.Entry.from_str("2024-02-28 11:00 hello")
  local basic_entry_with_tags = entry.Entry.from_str("2024-02-28 11:00 hello +tag1 +tag2")
  local basic_entry_with_context = entry.Entry.from_str("2024-02-28 11:00 hello @context")
  local basic_entry_with_running_pomo = entry.Entry.from_str("2024-02-28 11:00 **- hello @context")
  local ent = entry.Entry.from_str("2024-02-28 11:00 * project: description @context +tag1 +tag2")
  local entry_no_report = entry.Entry.from_str("2024-02-28 11:00 * !project: description @context")
  local entry_single_running_pomo = entry.Entry.from_str("2054-02-28 11:00 - !project: description @context")

  describe("when they provide raw data, they", function()
    it("should provide data in simple cases", function()
      assert.are.equal(nil, basic_entry_with_tags.context)
      assert.are.equal(28, basic_entry_with_tags.timestamp:getday())
      assert.are.equal(11, basic_entry_with_tags.timestamp:gethours())
      assert.are.equal(0, basic_entry.tags:len())
    end)

    it("should support multiple tags", function()
      assert.are.equal(2, basic_entry_with_tags.tags:len())
      assert.is_true(basic_entry_with_tags.tags:contains("tag1"))
      assert.is_true(basic_entry_with_tags.tags:contains("tag2"))
    end)

    it("should support a context", function()
      assert.are.equal("context", basic_entry_with_context.context)
    end)

    it("should support a project", function()
      assert.are.equal(nil, basic_entry.project)
      assert.are.equal(nil, basic_entry_with_running_pomo.project)
      assert.are.equal("project", ent.project)
      assert.are.equal("project", entry_no_report.project)
    end)

    it("should support a description", function()
      assert.are.equal("hello", basic_entry.description)
      assert.are.equal("hello @context", basic_entry_with_context.description)
      assert.are.equal("description @context", entry_no_report.description)
      assert.are.equal("description @context +tag1 +tag2", ent.description)
    end)

    it("should return the correct pomodoro count", function()
      assert.are.equal(2, basic_entry_with_running_pomo:pomodoros())
      assert.are.equal(0, entry_single_running_pomo:pomodoros())
      assert.are.equal(0, basic_entry_with_context:pomodoros())
      assert.are.equal(1, entry_no_report:pomodoros())
    end)
  end)

  describe("when they provide behaviour, they", function()
    it("should accurately identify if they lie in the past", function()
      assert.is_true(basic_entry_with_running_pomo:is_past())
      assert.is_false(entry_single_running_pomo:is_past())
    end)
  end)
end)
